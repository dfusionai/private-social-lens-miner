name: Build and Release Electron App

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    env:
      # APPLE_ID: ${{ secrets.APPLE_ID }}
      # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      # CSC_LINK: ${{ secrets.CSC_LINK }}
      # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: us-east-1

    strategy:
      matrix:
        os: [windows-latest] # ubuntu-latest, macos-latest
        include:
          - os: windows-latest
            platform: win
            artifact-name: windows-build
            executable-path: dist/executables/dFusion-DLP-miner-3.0.0.exe # TODO version

          # - os: ubuntu-latest
          #   platform: linux
          #   artifact-name: linux-build
          #   executable-path: dist/executables/dFusion-DLP-miner-0.5.0.AppImage # TODO version

          # - os: macos-latest
          #   platform: mac
          #   artifact-name: macos-build
          #   executable-path: dist/executables/dFusion-DLP-miner-0.1.0-arm64.dmg # TODO version

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Setup Python environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install python@3.10
          export PATH="/opt/homebrew/opt/python@3.10/libexec/bin:$PATH"
          python3.10 -m venv venv
          source venv/bin/activate
          python3.10 --version
          python3.10 -m pip install --upgrade pip setuptools wheel
          export CSC_IDENTITY_AUTO_DISCOVERY=false

      - name: Extract version from package.json
        id: get_version
        run: echo "version=$(node -e 'require(\"./package.json\").version')" >> $GITHUB_OUTPUT

      - name: Print extracted version
        run: echo "Version is ${{ steps.get_version.outputs.version }}"

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            source venv/bin/activate
          fi
          npm install
        shell: bash

      - name: Build & package renderer (vpsl-miner) and Electron app ${{ matrix.platform }}
        run: npx nx package electron --verbose
        shell: bash

      - name: Make Electron app ${{ matrix.platform }}
        run: npx nx run electron:make --verbose
        shell: bash

      - name: Publish Electron app ${{ matrix.platform }}
        run: npx electron-builder --publish always
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.executable-path }}

      - name: Debug directory structure
        run: |
          echo "Root Directory:"
          ls -la
          echo "Dist Directory:"
          ls -la dist
          echo "Executables Directory:"
          ls -la dist/executables
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "mac-arm64 Directory:"
            ls -la dist/executables/mac-arm64
          fi
        shell: bash

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/**/*
